name: Complete CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: blackjack-game
  S3_BUCKET: josephaleto.io
  CLOUDFRONT_DISTRIBUTION_ID: EDF9KNLZPHME3

jobs:
  # Test and Build
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: lambda/package-lock.json

      - name: Install Lambda Dependencies
        run: |
          cd lambda
          npm ci

      - name: Run ESLint
        run: |
          cd lambda
          npm run lint

      - name: Run Unit Tests
        run: |
          cd lambda
          npm test

      - name: Run Test Coverage
        run: |
          cd lambda
          npm run test:coverage

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./lambda/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Security Audit
        run: |
          cd lambda
          npm audit --audit-level=high

  # Deploy Infrastructure (if changes detected)
  infrastructure:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Validate
        run: |
          cd infra
          terraform validate

      - name: Terraform Format Check
        run: |
          cd infra
          terraform fmt -check

      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply tfplan

  # Deploy Lambda Function
  deploy-lambda:
    needs: [test, infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Lambda Deployment Package
        run: |
          cd lambda
          zip -r lambda-function.zip . -x "*.zip" "*.git*" "*.DS_Store" "*/__pycache__/*" "*/node_modules/.cache/*"
          ls -la lambda-function.zip

      - name: Deploy Lambda Function
        run: |
          cd lambda
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda-function.zip \
            --region ${{ env.AWS_REGION }}

      - name: Wait for Lambda Update
        run: |
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }}

  # Deploy Frontend
  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync Website to S3
        run: |
          aws s3 sync website/ s3://${{ env.S3_BUCKET }}/ --follow-symlinks --delete

      - name: Invalidate CloudFront Distribution
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  # Deployment Summary
  deployment-summary:
    needs: [deploy-lambda, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment Summary:"
          echo "âœ… Lambda Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
          echo "âœ… Frontend: S3 bucket ${{ env.S3_BUCKET }}"
          echo "âœ… CDN: CloudFront distribution ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          echo "ðŸŽ‰ Deployment completed successfully!"
